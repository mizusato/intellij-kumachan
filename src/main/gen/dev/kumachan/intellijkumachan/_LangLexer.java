/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.kumachan.intellijkumachan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.kumachan.intellijkumachan.Types.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lang.flex</tt>
 */
public class _LangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 7, 6]
   * Total runtime size is 1808 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>13]<<7)|((ch>>6)&0x7f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\206\2");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3\1\5\277\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\1\2\2\1\1\3\22\0\1\6\1\0\1\10\3\0\1\50\1\7\1\36\1\37\1\5\1\24\1"+
    "\44\1\11\1\22\1\4\1\12\1\20\6\16\2\21\1\45\1\46\1\0\1\62\1\63\1\0\1\47\1\14"+
    "\1\17\2\14\1\23\1\14\10\0\1\15\10\0\1\13\2\0\1\40\1\25\1\41\2\0\1\27\1\64"+
    "\1\34\1\67\1\32\1\35\1\53\1\31\1\57\1\52\2\31\1\54\1\65\1\60\1\33\1\66\1\31"+
    "\1\70\1\55\1\61\1\30\1\72\1\56\1\26\1\71\1\31\1\42\1\51\1\43\7\0\1\1\242\0"+
    "\2\1\26\0\1\6\77\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\2\3\1\1\2\4\1\5"+
    "\1\6\1\3\3\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\6\1"+
    "\1\23\4\1\1\24\1\1\1\0\1\25\1\0\2\4"+
    "\5\0\1\26\3\27\1\0\4\1\1\30\1\31\7\1"+
    "\1\32\4\1\1\24\1\33\1\1\1\0\6\1\3\4"+
    "\1\34\1\0\1\34\1\35\1\0\7\1\1\36\1\1"+
    "\1\37\7\1\2\0\1\24\3\4\1\1\1\34\1\40"+
    "\2\1\1\41\1\42\3\1\1\43\2\1\1\44\4\1"+
    "\1\24\1\0\1\45\1\1\1\46\5\1\1\47\5\1"+
    "\1\50\1\1\1\51\1\52\6\1\1\53\1\1\1\54"+
    "\1\1\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u03eb"+
    "\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0127\0\u03b0\0\u0162\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u03b0\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u03b0\0\73\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\73\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u079b\0\u07d6\0\u0811\0\u0f71"+
    "\0\u0fac\0\u0fac\0\u03b0\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\73\0\u11bf\0\73\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\73"+
    "\0\u0e85\0\u0ec0\0\u0efb\0\u140d\0\u140d\0\u03b0\0\u1448\0\u1483"+
    "\0\73\0\73\0\u14be\0\u14f9\0\u1534\0\73\0\u156f\0\u15aa"+
    "\0\73\0\u15e5\0\u1620\0\u165b\0\u1696\0\u03b0\0\u16d1\0\73"+
    "\0\u170c\0\73\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\73"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\73\0\u1995\0\73"+
    "\0\73\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\73"+
    "\0\u1b32\0\73\0\u1b6d\0\73\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\2\1\4\1\6\1\7"+
    "\1\10\1\11\3\2\1\12\1\2\2\12\1\13\2\2"+
    "\1\14\1\2\1\15\1\16\2\2\1\17\1\2\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\2"+
    "\1\40\1\2\1\41\1\42\1\43\2\2\1\44\1\2"+
    "\1\45\1\46\1\2\1\47\2\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\21\2\2\0\1\3\73\0\1\4\2\0\1\4\64\0"+
    "\2\2\2\0\1\50\1\51\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\21\2\7\52\1\53"+
    "\63\52\10\54\1\53\62\54\2\2\2\0\2\2\3\0"+
    "\1\2\1\55\3\2\1\56\1\2\2\56\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\21\2\12\0\1\12"+
    "\1\57\1\0\1\60\1\12\1\61\2\12\1\62\1\63"+
    "\2\0\1\57\4\0\1\60\1\61\1\63\47\0\1\12"+
    "\3\0\1\12\1\0\2\12\1\62\1\63\11\0\1\63"+
    "\57\0\1\64\76\0\1\65\1\0\1\66\5\67\14\0"+
    "\10\67\2\0\7\67\1\70\3\0\67\70\2\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\6\2\1\71\14\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\14\2\1\72\6\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\2\2\1\73"+
    "\3\2\1\74\12\2\140\0\1\75\25\0\2\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\1\2\1\76\4\2\1\77\14\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\1\100\5\2\14\0\23\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\5\2\1\101\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\5\2\1\102\15\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\5\2\1\103\14\0\12\2\1\104\10\2\2\0\2\2"+
    "\3\0\11\2\1\0\2\2\1\0\1\2\1\0\6\2"+
    "\14\0\17\2\1\105\3\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\6\2\14\0\11\2"+
    "\1\106\11\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\5\2\1\107\14\0\23\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\3\2\1\110\2\2\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\5\2\1\111"+
    "\14\0\23\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\12\2\1\112\6\2"+
    "\2\113\1\0\1\113\1\114\66\113\2\115\2\116\1\117"+
    "\1\120\3\116\11\115\1\116\2\115\1\116\1\115\1\116"+
    "\6\115\14\116\21\115\2\2\2\0\2\2\3\0\1\2"+
    "\1\56\1\121\1\2\1\122\1\56\1\123\2\56\1\62"+
    "\1\124\1\2\1\0\1\121\1\0\3\2\1\122\1\123"+
    "\1\124\14\0\23\2\2\0\2\2\3\0\1\2\1\56"+
    "\3\2\1\56\1\2\2\56\1\62\1\124\1\2\1\0"+
    "\1\2\1\0\5\2\1\124\14\0\21\2\12\0\1\125"+
    "\1\0\1\125\1\0\4\125\1\0\1\125\6\0\1\125"+
    "\1\0\2\125\15\0\1\125\10\0\1\125\2\0\1\125"+
    "\15\0\1\126\3\0\1\126\1\0\1\126\64\0\1\127"+
    "\5\0\1\127\64\0\1\130\3\0\1\130\1\0\2\130"+
    "\62\0\1\131\1\132\3\0\1\132\1\0\2\132\2\0"+
    "\1\131\70\0\1\133\62\0\1\134\1\0\1\134\1\0"+
    "\4\134\1\0\1\134\6\0\1\134\1\0\2\134\15\0"+
    "\1\134\10\0\1\134\2\0\1\134\15\0\1\66\1\0"+
    "\1\66\1\0\4\66\1\0\1\66\6\0\1\66\1\0"+
    "\2\66\15\0\1\66\10\0\1\66\2\0\1\66\32\0"+
    "\1\67\43\0\2\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\1\135\22\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\5\2\1\136\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\3\2\1\137\17\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\140\5\2\14\0\7\2"+
    "\1\141\13\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\7\2\1\142\13\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\6\2\14\0\6\2\1\143\14\2\2\0\2\2"+
    "\3\0\11\2\1\0\2\2\1\0\1\2\1\0\6\2"+
    "\14\0\7\2\1\144\13\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\5\2\1\145\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\4\2\1\146\16\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\7\2\1\147\3\2\1\150\7\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\14\2\1\151\6\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\7\2\1\152\13\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\6\2\1\153"+
    "\14\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\15\2\1\154\5\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\16\2\1\155\2\2\2\113\1\0\70\113"+
    "\2\114\1\0\70\114\2\115\2\116\1\115\1\120\3\116"+
    "\11\115\1\116\2\115\1\116\1\115\1\116\6\115\14\116"+
    "\21\115\5\116\1\156\65\116\2\2\2\0\1\51\1\2"+
    "\3\0\11\2\1\0\2\2\1\0\1\2\1\0\6\2"+
    "\14\0\21\2\2\51\2\157\1\160\1\51\3\157\11\51"+
    "\1\157\2\51\1\157\1\51\1\157\6\51\14\157\21\51"+
    "\2\2\2\0\2\2\3\0\1\2\1\161\1\2\1\161"+
    "\1\2\4\161\1\0\1\161\1\2\1\0\1\2\1\0"+
    "\2\2\1\161\1\2\2\161\14\0\1\2\1\161\10\2"+
    "\1\161\2\2\1\161\5\2\2\0\2\2\3\0\1\2"+
    "\1\162\3\2\1\162\1\2\1\162\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\23\2\2\0\2\2"+
    "\3\0\1\2\1\163\5\2\1\163\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\23\2\2\0\2\2"+
    "\3\0\1\164\1\165\3\2\1\165\1\2\2\165\1\0"+
    "\1\2\1\164\1\0\1\2\1\0\6\2\14\0\21\2"+
    "\12\0\1\130\3\0\1\130\1\0\2\130\1\0\1\63"+
    "\11\0\1\63\47\0\1\132\3\0\1\132\1\0\2\132"+
    "\63\0\1\166\1\0\1\166\1\0\4\166\1\0\1\166"+
    "\6\0\1\166\1\0\2\166\15\0\1\166\10\0\1\166"+
    "\2\0\1\166\3\0\2\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\3\2\1\167\2\2"+
    "\14\0\23\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\16\2\1\170\4\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\5\2\1\171\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\13\2\1\172\7\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\16\2\1\173"+
    "\4\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\5\2\1\174\14\0\23\2\2\0\2\2"+
    "\3\0\11\2\1\0\2\2\1\0\1\2\1\0\6\2"+
    "\14\0\15\2\1\175\5\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\6\2\14\0\6\2"+
    "\1\176\14\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\1\177\22\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\5\2\1\200\14\0\23\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\5\2\1\201\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\5\2\1\202\15\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\3\2\1\203\17\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\3\2\1\204"+
    "\2\2\14\0\23\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\1\205\20\2"+
    "\4\157\1\206\66\157\4\116\1\207\1\156\65\116\2\2"+
    "\2\0\2\2\3\0\1\2\1\165\3\2\1\165\1\2"+
    "\2\165\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\6\2\1\210\14\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\12\2\1\211\10\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\17\2\1\212\3\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\16\2\1\213"+
    "\4\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\7\2\1\214\13\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\20\2\1\215\2\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\3\2\1\216\17\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\3\2\1\217\2\2\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\6\2\14\0\7\2\1\220\13\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\16\2\1\221\4\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\12\2\1\222\6\2\4\0\1\157\66\0\2\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\7\2\1\223\13\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\1\2\1\224\21\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\1\225\22\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\5\2\1\226\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\14\2\1\227\6\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\2\2\1\230\3\2\14\0"+
    "\23\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\2\2\1\231\3\2\14\0\23\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\2\2\1\232\3\2\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\3\2\1\233"+
    "\2\2\14\0\23\2\2\0\2\2\3\0\11\2\1\0"+
    "\2\2\1\0\1\2\1\0\6\2\14\0\12\2\1\234"+
    "\10\2\2\0\2\2\3\0\11\2\1\0\2\2\1\0"+
    "\1\2\1\0\3\2\1\235\2\2\14\0\23\2\2\0"+
    "\2\2\3\0\11\2\1\0\2\2\1\0\1\2\1\0"+
    "\6\2\14\0\12\2\1\236\10\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\6\2\14\0"+
    "\1\237\22\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\16\2\1\240\4\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\6\2\14\0\15\2\1\241\5\2\2\0\2\2"+
    "\3\0\11\2\1\0\2\2\1\0\1\2\1\0\6\2"+
    "\14\0\6\2\1\242\14\2\2\0\2\2\3\0\11\2"+
    "\1\0\2\2\1\0\1\2\1\0\6\2\14\0\15\2"+
    "\1\243\5\2\2\0\2\2\3\0\11\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\14\0\15\2\1\244\5\2"+
    "\2\0\2\2\3\0\11\2\1\0\2\2\1\0\1\2"+
    "\1\0\5\2\1\245\14\0\23\2\2\0\2\2\3\0"+
    "\11\2\1\0\2\2\1\0\1\2\1\0\5\2\1\246"+
    "\14\0\21\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\17\1\7\11\1\1\4\11\15\1\1\0\1\11"+
    "\1\0\2\1\5\0\3\1\1\11\1\0\4\1\1\11"+
    "\20\1\1\0\12\1\1\0\1\1\1\11\1\0\21\1"+
    "\2\0\6\1\1\11\17\1\1\11\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _LangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TOKEN_NAME;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return INT;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return SYM4600;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return SYM9200;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return SYM4000;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return SYM4100;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return SYM9100;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return SYM9300;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return SYM12300;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return SYM12500;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return SYM4400;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return SYM5800;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return SYM5900;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return SYM6400;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return SYM3800;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return SYM12400;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return SYM6100;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return COMMENT;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return TOKEN_TEXT;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return SYM46004600;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return CHAR;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return SYM58005800;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return IF;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return SYM61006200;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return DOC;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return FLOAT;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return SYM460046004600;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return LET;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return NEW;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return BYTE;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return ELSE;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return ENUM;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return WHEN;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return TYPE;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return UNION;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return ENTRY;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return CONST;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return NATIVE;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return METHOD;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return RECORD;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return OPERATOR;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return FUNCTION;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return VARIADIC;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return INTERFACE;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return NAMESPACE;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
